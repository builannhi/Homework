// 1. Vi·∫øt h√†m `printNumbers(a, b)` nh·∫≠n hai gi√° tr·ªã ƒë·∫ßu v√†o `a`, `b` l√† hai s·ªë nguy√™n d∆∞∆°ng b·∫•t k·ª≥ ($a < b$),
// in ra c√°c s·ªë trong kho·∫£ng t·ª´ a - b theo th·ª© t·ª± tƒÉng d·∫ßn

function printNumbers(a, b) {
  if (a < b && a > 0 && b > 0)
    for (let i = a; i <= b; i++) {
      console.log(i);
    }
  else console.log(`gi√° tr·ªã kh√¥ng h·ª£p l·ªá`);
}

printNumbers(3, 9);
printNumbers(9, 3);

// 2. Vi·∫øt h√†m `printNumbers(a, b)` nh·∫≠n hai gi√° tr·ªã ƒë·∫ßu v√†o `a`, `b` l√† hai s·ªë nguy√™n d∆∞∆°ng b·∫•t k·ª≥ ($a < b$),
// in ra c√°c s·ªë trong kho·∫£ng t·ª´ a - b theo th·ª© t·ª± gi·∫£m d·∫ßn

function printNumbers2(a, b) {
  if (a < b && a > 0 && b > 0)
    for (let i = b; i >= a; i--) {
      console.log(i);
    }
  else console.log(`gi√° tr·ªã kh√¥ng h·ª£p l·ªá`);
}

printNumbers2(9, 3);
printNumbers2(3, 9);

//3. Vi·∫øt h√†m `sumOfOddNumbers(a, b)` nh·∫≠n hai gi√° tr·ªã ƒë·∫ßu v√†o `a`, `b` l√† hai s·ªë nguy√™n d∆∞∆°ng b·∫•t k·ª≥,
// t√≠nh v√† ** tr·∫£ v·ªÅ k·∫øt qu·∫£ ** l√† t·ªïng c·ªßa c√°c s·ªë l·∫ª trong kho·∫£ng t·ª´ a ƒë·∫øn b(bao g·ªìm c·∫£ a v√† b).

// üí° L∆∞u √Ω tr∆∞·ªùng h·ª£p a c√≥ th·ªÉ nh·ªè h∆°n b

function isOddNumber(a) {
  if (a % 2 == 1) return true;
  else return false;
}

function sumOfOddNumbers(a, b) {
  let total = 0;
  if (a == b) {
    if (isOddNumber(a)) total = a;
    else total = undefined;
  } else if (a < b) {
    for (let i = a; i <= b; i++) {
      if (isOddNumber(i)) total = total + i;
    }
  } else {
    for (let i = b; i <= a; i++) {
      if (isOddNumber(i)) total = total + i;
    }
  }
  return total;
}

console.log(sumOfOddNumbers(2, 10));
console.log(sumOfOddNumbers(11, 2));
console.log(sumOfOddNumbers(8, 8));

// 4. Vi·∫øt h√†m `divisor(number)` nh·∫≠n m·ªôt gi√° tr·ªã ƒë·∫ßu v√†o `number` l√† m·ªôt s·ªë b·∫•t k·ª≥, in ra c√°c ∆∞·ªõc s·ªë c·ªßa `number`

function divisor(n) {
  for (let i = 1; i <= n; i++) {
    if (n % i == 0) console.log(i);
  }
}

divisor(25);
divisor(9);

// 5. Vi·∫øt h√†m `factorial(number)` nh·∫≠n m·ªôt gi√° tr·ªã ƒë·∫ßu v√†o `number` l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng b·∫•t k·ª≥,
// t√≠nh v√† ** tr·∫£ v·ªÅ k·∫øt qu·∫£ ** l√† giai th·ª´a c·ªßa`number`

function factorial(n) {
  let result = 1;
  for (let i = 1; i <= n; i++) {
    result = result * i;
  }
  console.log(result);
}

factorial(0);
factorial(5);

//6. Vi·∫øt h√†m `countFolding(thickness)` nh·∫≠n m·ªôt gi√° tr·ªã ƒë·∫ßu v√†o `thickness` l√† ƒë·ªô d√†y (ƒë∆°n v·ªã m√©t),
// t√≠nh s·ªë l·∫ßn g·∫•p m·ªôt t·ªù gi·∫•y c√≥ ƒë·ªô d√†y 0.1mm ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c ƒë·ªô d√†y l·ªõn h∆°n ho·∫∑c b·∫±ng v·ªõi `thickness` truy·ªÅn v√†o

function countFolding(t) {
  let paper = 0.1;
  let count = 0;

  t = t * 1000;

  while (paper < t) {
    paper *= 2;
    count++;
  }
  return count;
}

console.log(countFolding(1));

//7. Vi·∫øt h√†m `countYears(dad, son)` nh·∫≠n hai gi√° tr·ªã ƒë·∫ßu v√†o:

// - `dad` l√† s·ªë tu·ªïi c·ªßa cha (cha l·ªõn h∆°n con √≠t nh·∫•t 18 tu·ªïi :v)
// - `son` l√† s·ªë tu·ªïi c·ªßa con

// T√≠nh xem sau bao nhi√™u nƒÉm n·ªØa th√¨ tu·ªïi cha g·∫•p 2 l·∫ßn tu·ªïi con

function countYears(d, s) {
  let count = 0;
  for (let i = 1; s * 2 < d; i++) {
    d++;
    s++;
    count++;
  }
  return count;
}

console.log(countYears(30, 6));

// 8. B√†i to√°n d√¢n gian g√† v√† ch√≥a, t√¨m ra s·ªë ch√¢n g√† v√† ch√≥a:

//     V·ª´a g√† v·ª´a ch√≥

//     B√≥ l·∫°i cho tr√≤n

//     Ba m∆∞∆°i s√°u con

//     M·ªôt trƒÉm ch√¢n ch·∫µn

function findDogLegsAndChickenLegs() {
  let d = 0;
  let c = 36;
  while (d * 4 + c * 2 < 100) {
    d++;
    c--;
  }
  console.log(`c√≥ ${d} con ch√≥ v√† ${c} con g√†`);
}

findDogLegsAndChickenLegs();
